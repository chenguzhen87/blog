var _class, _descriptor, _class3;
function _initializerDefineProperty(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {
    };
    Object.keys(descriptor).forEach(function(key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) desc.writable = true;
    desc = decorators.slice().reverse().reduce(function(desc1, decorator) {
        return decorator(target, property, desc1) || desc1;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object.defineProperty(target, property, desc);
        desc = null;
    }
    return desc;
}
function _initializerWarningHelper(descriptor, context) {
    throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.");
}
function readonly(target, name, descriptor) {
    descriptor.writable = false;
    return descriptor;
}
let Person = (_class = class Person1 {
    constructor(){
        _initializerDefineProperty(this, "name", _descriptor, this);
    }
}, _descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [
    readonly
], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return 'person';
    }
}), _class);
const person = new Person();
person.name = 'tom';
console.log(person);
let MyClass = log(_class3 = class MyClass1 {
}) || _class3;
function log(target) {
    // 这个 target 在这里就是 MyClass 这个类
    target.prototype.logger = ()=>`${target.name} 被调用`
    ;
}
const test = new MyClass();
console.log(test.logger()); // MyClass 被调用
